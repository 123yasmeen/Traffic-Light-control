
Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000b94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011dd  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  00001f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad8  00000000  00000000  0000276d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00003248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046b  00000000  00000000  00003494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000817  00000000  00000000  000038ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  74:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <INT0_ISR>:
			Timer_delay(1);
		}
		LED_off(Cars,Cars_YELLOW_LED);
}
void INT0_ISR()
{
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	00 d0       	rcall	.+0      	; 0x84 <INT0_ISR+0x8>
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	//pedestrian mode
	uint8_t val,redled,greenled,yellowled;
	//BUTTON_read(Button,Button_Pin,&val);
	DIO_read(Cars,Cars_RED_LED,&redled);
  8a:	ae 01       	movw	r20, r28
  8c:	4f 5f       	subi	r20, 0xFF	; 255
  8e:	5f 4f       	sbci	r21, 0xFF	; 255
  90:	62 e0       	ldi	r22, 0x02	; 2
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_read>
	DIO_read(Cars,Cars_GREEN_LED,&greenled);
  98:	ae 01       	movw	r20, r28
  9a:	4e 5f       	subi	r20, 0xFE	; 254
  9c:	5f 4f       	sbci	r21, 0xFF	; 255
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	81 e4       	ldi	r24, 0x41	; 65
  a2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_read>
	DIO_read(Cars,Cars_YELLOW_LED,&yellowled);
  a6:	ae 01       	movw	r20, r28
  a8:	4d 5f       	subi	r20, 0xFD	; 253
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_read>
		LED_off(pedestrians,pedestrians_RED_LED);
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	82 e4       	ldi	r24, 0x42	; 66
  b8:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
		if (redled==HIGH)
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	81 f4       	brne	.+32     	; 0xe2 <INT0_ISR+0x66>
		{
			LED_on(pedestrians,pedestrians_GREEN_LED);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	82 e4       	ldi	r24, 0x42	; 66
  c6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
			LED_on(Cars,Cars_RED_LED);
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	81 e4       	ldi	r24, 0x41	; 65
  ce:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
			Timer_delay(5);
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
			LED_off(Cars,Cars_RED_LED);
  d8:	62 e0       	ldi	r22, 0x02	; 2
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
  e0:	79 c0       	rjmp	.+242    	; 0x1d4 <INT0_ISR+0x158>
		}
		else if(yellowled==HIGH)
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	89 f5       	brne	.+98     	; 0x14a <INT0_ISR+0xce>
		{
			LED_on(Cars,Cars_YELLOW_LED);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	81 e4       	ldi	r24, 0x41	; 65
  ec:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
			LED_on(pedestrians,pedestrians_YELLOW_LED);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	82 e4       	ldi	r24, 0x42	; 66
  f4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
			for (uint8_t i= 0;i<5;i++)
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	0c c0       	rjmp	.+24     	; 0x114 <INT0_ISR+0x98>
			{
				LED_toggle(Cars,Cars_YELLOW_LED);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 89 01 	call	0x312	; 0x312 <LED_toggle>
				LED_toggle(pedestrians,pedestrians_YELLOW_LED);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	82 e4       	ldi	r24, 0x42	; 66
 108:	0e 94 89 01 	call	0x312	; 0x312 <LED_toggle>
				Timer_delay(1);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
		}
		else if(yellowled==HIGH)
		{
			LED_on(Cars,Cars_YELLOW_LED);
			LED_on(pedestrians,pedestrians_YELLOW_LED);
			for (uint8_t i= 0;i<5;i++)
 112:	1f 5f       	subi	r17, 0xFF	; 255
 114:	15 30       	cpi	r17, 0x05	; 5
 116:	90 f3       	brcs	.-28     	; 0xfc <INT0_ISR+0x80>
			{
				LED_toggle(Cars,Cars_YELLOW_LED);
				LED_toggle(pedestrians,pedestrians_YELLOW_LED);
				Timer_delay(1);
			}
			yellowled=LOW;
 118:	1b 82       	std	Y+3, r1	; 0x03
			LED_off(Cars,Cars_YELLOW_LED);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
			LED_off(pedestrians,pedestrians_YELLOW_LED);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	82 e4       	ldi	r24, 0x42	; 66
 126:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
			LED_on(pedestrians,pedestrians_GREEN_LED);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	82 e4       	ldi	r24, 0x42	; 66
 12e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
			LED_on(Cars,Cars_RED_LED);
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
			Timer_delay(5);
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
			LED_off(Cars,Cars_RED_LED);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
 148:	45 c0       	rjmp	.+138    	; 0x1d4 <INT0_ISR+0x158>
		}
		else if (greenled==HIGH)
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	09 f0       	breq	.+2      	; 0x152 <INT0_ISR+0xd6>
 150:	41 c0       	rjmp	.+130    	; 0x1d4 <INT0_ISR+0x158>
		{
				LED_on(pedestrians,pedestrians_RED_LED);
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	82 e4       	ldi	r24, 0x42	; 66
 156:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
				Timer_delay(5);
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
				LED_off(pedestrians,pedestrians_RED_LED);
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	82 e4       	ldi	r24, 0x42	; 66
 164:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
				LED_off(Cars,Cars_GREEN_LED);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
		
			LED_off(pedestrians,pedestrians_YELLOW_LED);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
			LED_off(Cars,Cars_YELLOW_LED);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	81 e4       	ldi	r24, 0x41	; 65
 17c:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
			for (uint8_t i= 0;i<5;i++)
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	0e c0       	rjmp	.+28     	; 0x1a0 <INT0_ISR+0x124>
			{
				yellowled=HIGH;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	8b 83       	std	Y+3, r24	; 0x03
				LED_toggle(Cars,Cars_YELLOW_LED);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	81 e4       	ldi	r24, 0x41	; 65
 18c:	0e 94 89 01 	call	0x312	; 0x312 <LED_toggle>
				LED_toggle(pedestrians,pedestrians_YELLOW_LED);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	82 e4       	ldi	r24, 0x42	; 66
 194:	0e 94 89 01 	call	0x312	; 0x312 <LED_toggle>
				Timer_delay(1);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
				LED_off(pedestrians,pedestrians_RED_LED);
				LED_off(Cars,Cars_GREEN_LED);
		
			LED_off(pedestrians,pedestrians_YELLOW_LED);
			LED_off(Cars,Cars_YELLOW_LED);
			for (uint8_t i= 0;i<5;i++)
 19e:	1f 5f       	subi	r17, 0xFF	; 255
 1a0:	15 30       	cpi	r17, 0x05	; 5
 1a2:	80 f3       	brcs	.-32     	; 0x184 <INT0_ISR+0x108>
				yellowled=HIGH;
				LED_toggle(Cars,Cars_YELLOW_LED);
				LED_toggle(pedestrians,pedestrians_YELLOW_LED);
				Timer_delay(1);
			}
			yellowled=LOW;
 1a4:	1b 82       	std	Y+3, r1	; 0x03
			LED_off(Cars,Cars_YELLOW_LED);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
			LED_off(pedestrians,pedestrians_YELLOW_LED);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	82 e4       	ldi	r24, 0x42	; 66
 1b2:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
			LED_on(pedestrians,pedestrians_GREEN_LED);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
			LED_on(Cars,Cars_RED_LED);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	81 e4       	ldi	r24, 0x41	; 65
 1c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
			Timer_delay(5);
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
			LED_off(Cars,Cars_RED_LED);
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	81 e4       	ldi	r24, 0x41	; 65
 1d0:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
		}
		
		LED_off(pedestrians,pedestrians_GREEN_LED);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	82 e4       	ldi	r24, 0x42	; 66
 1d8:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
		LED_off(pedestrians,pedestrians_RED_LED);
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	82 e4       	ldi	r24, 0x42	; 66
 1e0:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
}
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	08 95       	ret

000001f2 <APP_Init>:
#include "app.h"
#include "../MCAL/Timer0/Timer0.h"
#include "../Bit_calculations.h"
void APP_Init(void)
{
	LED_init(Cars,Cars_GREEN_LED);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e4       	ldi	r24, 0x41	; 65
 1f6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_init>
	LED_init(Cars,Cars_YELLOW_LED);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	81 e4       	ldi	r24, 0x41	; 65
 1fe:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_init>
	LED_init(Cars,Cars_RED_LED);
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	81 e4       	ldi	r24, 0x41	; 65
 206:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_init>
	LED_init(pedestrians,pedestrians_GREEN_LED);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	82 e4       	ldi	r24, 0x42	; 66
 20e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_init>
	LED_init(pedestrians,pedestrians_YELLOW_LED);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	82 e4       	ldi	r24, 0x42	; 66
 216:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_init>
	LED_init(pedestrians,pedestrians_RED_LED);
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_init>
	//BUTTON_init(Button,Button_Pin);
	GIE_Enable();
 222:	0e 94 ae 03 	call	0x75c	; 0x75c <GIE_Enable>
   EXT_INT0_Init(RISING_EDGE);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 55 03 	call	0x6aa	; 0x6aa <EXT_INT0_Init>
   EXT_INT0_SETCallBack(&INT0_ISR);
 22c:	8e e3       	ldi	r24, 0x3E	; 62
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 80 03 	call	0x700	; 0x700 <EXT_INT0_SETCallBack>
 234:	08 95       	ret

00000236 <APP_Start>:
}
void APP_Start(void)
{
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	00 d0       	rcall	.+0      	; 0x23e <APP_Start+0x8>
 23e:	1f 92       	push	r1
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	//Normal mode
	uint8_t val,redled,greenled,yellowled;
	//BUTTON_read(Button,Button_Pin,&val);
	DIO_read(Cars,Cars_RED_LED,&redled);
 244:	ae 01       	movw	r20, r28
 246:	4f 5f       	subi	r20, 0xFF	; 255
 248:	5f 4f       	sbci	r21, 0xFF	; 255
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	81 e4       	ldi	r24, 0x41	; 65
 24e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_read>
	DIO_read(Cars,Cars_GREEN_LED,&greenled);
 252:	ae 01       	movw	r20, r28
 254:	4e 5f       	subi	r20, 0xFE	; 254
 256:	5f 4f       	sbci	r21, 0xFF	; 255
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	81 e4       	ldi	r24, 0x41	; 65
 25c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_read>
	DIO_read(Cars,Cars_YELLOW_LED,&yellowled);
 260:	ae 01       	movw	r20, r28
 262:	4d 5f       	subi	r20, 0xFD	; 253
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	81 e4       	ldi	r24, 0x41	; 65
 26a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_read>
		LED_on(Cars,Cars_GREEN_LED);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	81 e4       	ldi	r24, 0x41	; 65
 272:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
		Timer_delay(5);
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
		LED_off(Cars,Cars_GREEN_LED);
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	81 e4       	ldi	r24, 0x41	; 65
 280:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
		for (uint8_t i= 0;i<5;i++)
 284:	10 e0       	ldi	r17, 0x00	; 0
 286:	08 c0       	rjmp	.+16     	; 0x298 <APP_Start+0x62>
		{
			LED_toggle(Cars,Cars_YELLOW_LED);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	0e 94 89 01 	call	0x312	; 0x312 <LED_toggle>
			Timer_delay(1);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
	DIO_read(Cars,Cars_GREEN_LED,&greenled);
	DIO_read(Cars,Cars_YELLOW_LED,&yellowled);
		LED_on(Cars,Cars_GREEN_LED);
		Timer_delay(5);
		LED_off(Cars,Cars_GREEN_LED);
		for (uint8_t i= 0;i<5;i++)
 296:	1f 5f       	subi	r17, 0xFF	; 255
 298:	15 30       	cpi	r17, 0x05	; 5
 29a:	b0 f3       	brcs	.-20     	; 0x288 <APP_Start+0x52>
		{
			LED_toggle(Cars,Cars_YELLOW_LED);
			Timer_delay(1);
		}
		LED_off(Cars,Cars_YELLOW_LED);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	81 e4       	ldi	r24, 0x41	; 65
 2a0:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
		LED_on(Cars,Cars_RED_LED);
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	81 e4       	ldi	r24, 0x41	; 65
 2a8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_on>
		Timer_delay(5);
 2ac:	85 e0       	ldi	r24, 0x05	; 5
 2ae:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
		LED_off(Cars,Cars_RED_LED);
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	81 e4       	ldi	r24, 0x41	; 65
 2b6:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
		for (uint8_t i= 0;i<5;i++)
 2ba:	10 e0       	ldi	r17, 0x00	; 0
 2bc:	08 c0       	rjmp	.+16     	; 0x2ce <APP_Start+0x98>
		{
			LED_toggle(Cars,Cars_YELLOW_LED);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	81 e4       	ldi	r24, 0x41	; 65
 2c2:	0e 94 89 01 	call	0x312	; 0x312 <LED_toggle>
			Timer_delay(1);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 b2 03 	call	0x764	; 0x764 <Timer_delay>
		}
		LED_off(Cars,Cars_YELLOW_LED);
		LED_on(Cars,Cars_RED_LED);
		Timer_delay(5);
		LED_off(Cars,Cars_RED_LED);
		for (uint8_t i= 0;i<5;i++)
 2cc:	1f 5f       	subi	r17, 0xFF	; 255
 2ce:	15 30       	cpi	r17, 0x05	; 5
 2d0:	b0 f3       	brcs	.-20     	; 0x2be <APP_Start+0x88>
		{
			LED_toggle(Cars,Cars_YELLOW_LED);
			Timer_delay(1);
		}
		LED_off(Cars,Cars_YELLOW_LED);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	81 e4       	ldi	r24, 0x41	; 65
 2d6:	0e 94 82 01 	call	0x304	; 0x304 <LED_off>
}
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	08 95       	ret

000002e8 <LED_init>:
 */ 
#include "LED.h"
uint8_t LED_init(uint8_t ledport,uint8_t ledpin)
{
	//calling DIO_init function to initialize the LED
	if(DIO_init(ledport,ledpin,OUT)==DIO_OK)
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	0e 94 94 01 	call	0x328	; 0x328 <DIO_init>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <LED_init+0xc>
	return LED_OK;
	else
	return LED_ERROR;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
}
 2f4:	08 95       	ret

000002f6 <LED_on>:
uint8_t LED_on(uint8_t ledport,uint8_t ledpin)
{
	//calling DIO_write function to turn on the LED and set its state to high
	if(DIO_write(ledport,ledpin,HIGH)==DIO_OK)
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	0e 94 21 02 	call	0x442	; 0x442 <DIO_write>
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	09 f0       	breq	.+2      	; 0x302 <LED_on+0xc>
	return LED_OK;
	else
	return LED_ERROR;
 300:	80 e0       	ldi	r24, 0x00	; 0
}
 302:	08 95       	ret

00000304 <LED_off>:
uint8_t LED_off(uint8_t ledport,uint8_t ledpin)
{
	//calling DIO_write function to turn off the LED and set its state to low
	if(DIO_write(ledport,ledpin,LOW)==DIO_OK)
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	0e 94 21 02 	call	0x442	; 0x442 <DIO_write>
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	09 f0       	breq	.+2      	; 0x310 <LED_off+0xc>
	return LED_OK;
	else
	return LED_ERROR;
 30e:	80 e0       	ldi	r24, 0x00	; 0
	//DIO_write(ledport,ledpin,LOW);
}
 310:	08 95       	ret

00000312 <LED_toggle>:
uint8_t LED_toggle(uint8_t ledport,uint8_t ledpin)
{
	//calling DIO_toggle function to toggle the led
	if(DIO_toggle(ledport,ledpin)==DIO_OK)
 312:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_toggle>
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	09 f0       	breq	.+2      	; 0x31c <LED_toggle+0xa>
	return LED_OK;
	else
	return LED_ERROR;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret

0000031e <main>:
#include "app/app.h"
int main(void)
{
    /* Replace with your application code */
	APP_Init();
 31e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <APP_Init>
	//DIO_init(Cars,Cars_GREEN_LED,OUT);
    while (1) 
    {
		APP_Start();
 322:	0e 94 1b 01 	call	0x236	; 0x236 <APP_Start>
 326:	fd cf       	rjmp	.-6      	; 0x322 <main+0x4>

00000328 <DIO_init>:

#include "DIO.h"
#include "../../Bit_calculations.h"
uint8_t DIO_init(uint8_t portnumber,uint8_t pinnumber,uint8_t direction)//initialize directions
{
	switch (portnumber)//using switch to decide which port will be used
 328:	82 34       	cpi	r24, 0x42	; 66
 32a:	49 f1       	breq	.+82     	; 0x37e <DIO_init+0x56>
 32c:	18 f4       	brcc	.+6      	; 0x334 <DIO_init+0xc>
 32e:	81 34       	cpi	r24, 0x41	; 65
 330:	41 f0       	breq	.+16     	; 0x342 <DIO_init+0x1a>
 332:	7d c0       	rjmp	.+250    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 334:	83 34       	cpi	r24, 0x43	; 67
 336:	09 f4       	brne	.+2      	; 0x33a <DIO_init+0x12>
 338:	40 c0       	rjmp	.+128    	; 0x3ba <DIO_init+0x92>
 33a:	84 34       	cpi	r24, 0x44	; 68
 33c:	09 f4       	brne	.+2      	; 0x340 <DIO_init+0x18>
 33e:	5a c0       	rjmp	.+180    	; 0x3f4 <DIO_init+0xcc>
 340:	76 c0       	rjmp	.+236    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		case PORT_A:
		//figuring out which direction
		if(direction==IN)
 342:	41 11       	cpse	r20, r1
 344:	0d c0       	rjmp	.+26     	; 0x360 <DIO_init+0x38>
		{
			CLEAR(DDRA,pinnumber);
 346:	2a b3       	in	r18, 0x1a	; 26
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_init+0x2a>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_init+0x26>
 356:	80 95       	com	r24
 358:	82 23       	and	r24, r18
 35a:	8a bb       	out	0x1a, r24	; 26
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	08 95       	ret
		//figuring out which direction
		if(direction==IN)
		{
			CLEAR(DDRA,pinnumber);
		}
		else if(direction==OUT)
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	09 f0       	breq	.+2      	; 0x366 <DIO_init+0x3e>
 364:	66 c0       	rjmp	.+204    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{
			SET(DDRA,pinnumber);
 366:	2a b3       	in	r18, 0x1a	; 26
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_init+0x4a>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_init+0x46>
 376:	82 2b       	or	r24, r18
 378:	8a bb       	out	0x1a, r24	; 26
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	08 95       	ret
		{
			return DIO_ERROR;//error handling
		}
		break;
		case PORT_B:
		if(direction==IN)
 37e:	41 11       	cpse	r20, r1
 380:	0d c0       	rjmp	.+26     	; 0x39c <DIO_init+0x74>
		{
			CLEAR(DDRB,pinnumber);
 382:	27 b3       	in	r18, 0x17	; 23
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_init+0x66>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_init+0x62>
 392:	80 95       	com	r24
 394:	82 23       	and	r24, r18
 396:	87 bb       	out	0x17, r24	; 23
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	08 95       	ret
		case PORT_B:
		if(direction==IN)
		{
			CLEAR(DDRB,pinnumber);
		}
		else if(direction==OUT)
 39c:	41 30       	cpi	r20, 0x01	; 1
 39e:	09 f0       	breq	.+2      	; 0x3a2 <DIO_init+0x7a>
 3a0:	4a c0       	rjmp	.+148    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		{
		   SET(DDRB,pinnumber);
 3a2:	27 b3       	in	r18, 0x17	; 23
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_init+0x86>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_init+0x82>
 3b2:	82 2b       	or	r24, r18
 3b4:	87 bb       	out	0x17, r24	; 23
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	08 95       	ret
		{
			return DIO_ERROR;
		}
		break;
		case PORT_C:
		if(direction==IN)
 3ba:	41 11       	cpse	r20, r1
 3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <DIO_init+0xb0>
		{
			CLEAR(DDRC,pinnumber);
 3be:	24 b3       	in	r18, 0x14	; 20
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_init+0xa2>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_init+0x9e>
 3ce:	80 95       	com	r24
 3d0:	82 23       	and	r24, r18
 3d2:	84 bb       	out	0x14, r24	; 20
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	08 95       	ret
		case PORT_C:
		if(direction==IN)
		{
			CLEAR(DDRC,pinnumber);
		}
		else if(direction==OUT)
 3d8:	41 30       	cpi	r20, 0x01	; 1
 3da:	79 f5       	brne	.+94     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			SET(DDRC,pinnumber);
 3dc:	24 b3       	in	r18, 0x14	; 20
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_init+0xc0>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_init+0xbc>
 3ec:	82 2b       	or	r24, r18
 3ee:	84 bb       	out	0x14, r24	; 20
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret
		{
			return DIO_ERROR;
		}
		break;
		case PORT_D:
		if(direction==IN)
 3f4:	41 11       	cpse	r20, r1
 3f6:	0d c0       	rjmp	.+26     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		{
			CLEAR(DDRD,pinnumber);
 3f8:	21 b3       	in	r18, 0x11	; 17
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	80 95       	com	r24
 40a:	82 23       	and	r24, r18
 40c:	81 bb       	out	0x11, r24	; 17
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	08 95       	ret
		case PORT_D:
		if(direction==IN)
		{
			CLEAR(DDRD,pinnumber);
		}
		else if(direction==OUT)
 412:	41 30       	cpi	r20, 0x01	; 1
 414:	a1 f4       	brne	.+40     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		{
			SET(DDRD,pinnumber);
 416:	21 b3       	in	r18, 0x11	; 17
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	82 2b       	or	r24, r18
 428:	81 bb       	out	0x11, r24	; 17
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	08 95       	ret
		{
			return DIO_ERROR;
		}
		break;
		default:
		return DIO_ERROR;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret
		{
			SET(DDRA,pinnumber);
		}
		else
		{
			return DIO_ERROR;//error handling
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret
		{
		   SET(DDRB,pinnumber);
		}
		else
		{
			return DIO_ERROR;
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret
		{
			SET(DDRC,pinnumber);
		}
		else
		{
			return DIO_ERROR;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
		{
			SET(DDRD,pinnumber);
		}
		else
		{
			return DIO_ERROR;
 43e:	80 e0       	ldi	r24, 0x00	; 0
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
}
 440:	08 95       	ret

00000442 <DIO_write>:
uint8_t DIO_write(uint8_t portnumber,uint8_t pinnumber,uint8_t value)
{
	switch (portnumber)
 442:	82 34       	cpi	r24, 0x42	; 66
 444:	49 f1       	breq	.+82     	; 0x498 <DIO_write+0x56>
 446:	18 f4       	brcc	.+6      	; 0x44e <DIO_write+0xc>
 448:	81 34       	cpi	r24, 0x41	; 65
 44a:	41 f0       	breq	.+16     	; 0x45c <DIO_write+0x1a>
 44c:	7d c0       	rjmp	.+250    	; 0x548 <DIO_write+0x106>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	09 f4       	brne	.+2      	; 0x454 <DIO_write+0x12>
 452:	40 c0       	rjmp	.+128    	; 0x4d4 <DIO_write+0x92>
 454:	84 34       	cpi	r24, 0x44	; 68
 456:	09 f4       	brne	.+2      	; 0x45a <DIO_write+0x18>
 458:	5a c0       	rjmp	.+180    	; 0x50e <DIO_write+0xcc>
 45a:	76 c0       	rjmp	.+236    	; 0x548 <DIO_write+0x106>
	{
		case PORT_A:
		if(value==LOW)
 45c:	41 11       	cpse	r20, r1
 45e:	0d c0       	rjmp	.+26     	; 0x47a <DIO_write+0x38>
		{
			CLEAR(PORTA,pinnumber);
 460:	2b b3       	in	r18, 0x1b	; 27
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_write+0x2a>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_write+0x26>
 470:	80 95       	com	r24
 472:	82 23       	and	r24, r18
 474:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	08 95       	ret
		case PORT_A:
		if(value==LOW)
		{
			CLEAR(PORTA,pinnumber);
		}
		else if(value==HIGH)
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	09 f0       	breq	.+2      	; 0x480 <DIO_write+0x3e>
 47e:	66 c0       	rjmp	.+204    	; 0x54c <DIO_write+0x10a>
		{
			SET(PORTA,pinnumber);
 480:	2b b3       	in	r18, 0x1b	; 27
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_write+0x4a>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_write+0x46>
 490:	82 2b       	or	r24, r18
 492:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	08 95       	ret
		{
			return DIO_ERROR;
		}
		break;
		case PORT_B:
		if(value==LOW)
 498:	41 11       	cpse	r20, r1
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <DIO_write+0x74>
		{
				CLEAR(PORTB,pinnumber);
 49c:	28 b3       	in	r18, 0x18	; 24
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_write+0x66>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_write+0x62>
 4ac:	80 95       	com	r24
 4ae:	82 23       	and	r24, r18
 4b0:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	08 95       	ret
		case PORT_B:
		if(value==LOW)
		{
				CLEAR(PORTB,pinnumber);
		}
		else if(value==HIGH)
 4b6:	41 30       	cpi	r20, 0x01	; 1
 4b8:	09 f0       	breq	.+2      	; 0x4bc <DIO_write+0x7a>
 4ba:	4a c0       	rjmp	.+148    	; 0x550 <DIO_write+0x10e>
		{
			SET(PORTB,pinnumber);;
 4bc:	28 b3       	in	r18, 0x18	; 24
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_write+0x86>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_write+0x82>
 4cc:	82 2b       	or	r24, r18
 4ce:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret
		{
			return DIO_ERROR;
		}
		break;
		case PORT_C:
		if(value==LOW)
 4d4:	41 11       	cpse	r20, r1
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <DIO_write+0xb0>
		{
		   CLEAR(PORTC,pinnumber);
 4d8:	25 b3       	in	r18, 0x15	; 21
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_write+0xa2>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_write+0x9e>
 4e8:	80 95       	com	r24
 4ea:	82 23       	and	r24, r18
 4ec:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	08 95       	ret
		case PORT_C:
		if(value==LOW)
		{
		   CLEAR(PORTC,pinnumber);
		}
		else if(value==HIGH)
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	79 f5       	brne	.+94     	; 0x554 <DIO_write+0x112>
		{
			SET(PORTC,pinnumber);
 4f6:	25 b3       	in	r18, 0x15	; 21
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_write+0xc0>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_write+0xbc>
 506:	82 2b       	or	r24, r18
 508:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	08 95       	ret
		{
			return DIO_ERROR;
		}
		break;
		case PORT_D:
		if(value==LOW)
 50e:	41 11       	cpse	r20, r1
 510:	0d c0       	rjmp	.+26     	; 0x52c <DIO_write+0xea>
		{
		  CLEAR(PORTD,pinnumber);
 512:	22 b3       	in	r18, 0x12	; 18
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_write+0xdc>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_write+0xd8>
 522:	80 95       	com	r24
 524:	82 23       	and	r24, r18
 526:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	08 95       	ret
		case PORT_D:
		if(value==LOW)
		{
		  CLEAR(PORTD,pinnumber);
		}
		else if(value==HIGH)
 52c:	41 30       	cpi	r20, 0x01	; 1
 52e:	a1 f4       	brne	.+40     	; 0x558 <DIO_write+0x116>
		{
			SET(PORTD,pinnumber);
 530:	22 b3       	in	r18, 0x12	; 18
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_write+0xfa>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_write+0xf6>
 540:	82 2b       	or	r24, r18
 542:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	08 95       	ret
		{
			return DIO_ERROR;
		}
		break;
		default:
		return DIO_ERROR;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	08 95       	ret
		{
			SET(PORTA,pinnumber);
		}
		else
		{
			return DIO_ERROR;
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	08 95       	ret
		{
			SET(PORTB,pinnumber);;
		}
		else
		{
			return DIO_ERROR;
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	08 95       	ret
		{
			SET(PORTC,pinnumber);
		}
		else
		{
			return DIO_ERROR;
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	08 95       	ret
		{
			SET(PORTD,pinnumber);
		}
		else
		{
			return DIO_ERROR;
 558:	80 e0       	ldi	r24, 0x00	; 0
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
}
 55a:	08 95       	ret

0000055c <DIO_toggle>:
uint8_t DIO_toggle(uint8_t portnumber,uint8_t pinnumber)
{
	switch (portnumber)
 55c:	82 34       	cpi	r24, 0x42	; 66
 55e:	a9 f0       	breq	.+42     	; 0x58a <DIO_toggle+0x2e>
 560:	18 f4       	brcc	.+6      	; 0x568 <DIO_toggle+0xc>
 562:	81 34       	cpi	r24, 0x41	; 65
 564:	31 f0       	breq	.+12     	; 0x572 <DIO_toggle+0x16>
 566:	35 c0       	rjmp	.+106    	; 0x5d2 <DIO_toggle+0x76>
 568:	83 34       	cpi	r24, 0x43	; 67
 56a:	d9 f0       	breq	.+54     	; 0x5a2 <DIO_toggle+0x46>
 56c:	84 34       	cpi	r24, 0x44	; 68
 56e:	29 f1       	breq	.+74     	; 0x5ba <DIO_toggle+0x5e>
 570:	30 c0       	rjmp	.+96     	; 0x5d2 <DIO_toggle+0x76>
	{
		case PORT_A:
		PORTA^=(1<<pinnumber);
 572:	2b b3       	in	r18, 0x1b	; 27
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_toggle+0x22>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_toggle+0x1e>
 582:	82 27       	eor	r24, r18
 584:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 586:	81 e0       	ldi	r24, 0x01	; 1
{
	switch (portnumber)
	{
		case PORT_A:
		PORTA^=(1<<pinnumber);
		break;
 588:	08 95       	ret
		case PORT_B:
		PORTB^=(1<<pinnumber);
 58a:	28 b3       	in	r18, 0x18	; 24
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_toggle+0x3a>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_toggle+0x36>
 59a:	82 27       	eor	r24, r18
 59c:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 59e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		PORTA^=(1<<pinnumber);
		break;
		case PORT_B:
		PORTB^=(1<<pinnumber);
		break;
 5a0:	08 95       	ret
		case PORT_C:
		PORTC^=(1<<pinnumber);
 5a2:	25 b3       	in	r18, 0x15	; 21
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_toggle+0x52>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_toggle+0x4e>
 5b2:	82 27       	eor	r24, r18
 5b4:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		PORTB^=(1<<pinnumber);
		break;
		case PORT_C:
		PORTC^=(1<<pinnumber);
		break;
 5b8:	08 95       	ret
		case PORT_D:
		PORTD^=(1<<pinnumber);
 5ba:	22 b3       	in	r18, 0x12	; 18
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_toggle+0x6a>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_toggle+0x66>
 5ca:	82 27       	eor	r24, r18
 5cc:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		PORTC^=(1<<pinnumber);
		break;
		case PORT_D:
		PORTD^=(1<<pinnumber);
		break;
 5d0:	08 95       	ret
		default:
		return DIO_ERROR;
 5d2:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_OK;
}
 5d4:	08 95       	ret

000005d6 <DIO_read>:
uint8_t DIO_read(uint8_t portnumber,uint8_t pinnumber,uint8_t *value)
{
	switch (portnumber)
 5d6:	82 34       	cpi	r24, 0x42	; 66
 5d8:	09 f1       	breq	.+66     	; 0x61c <DIO_read+0x46>
 5da:	18 f4       	brcc	.+6      	; 0x5e2 <DIO_read+0xc>
 5dc:	81 34       	cpi	r24, 0x41	; 65
 5de:	39 f0       	breq	.+14     	; 0x5ee <DIO_read+0x18>
 5e0:	62 c0       	rjmp	.+196    	; 0x6a6 <DIO_read+0xd0>
 5e2:	83 34       	cpi	r24, 0x43	; 67
 5e4:	91 f1       	breq	.+100    	; 0x64a <DIO_read+0x74>
 5e6:	84 34       	cpi	r24, 0x44	; 68
 5e8:	09 f4       	brne	.+2      	; 0x5ec <DIO_read+0x16>
 5ea:	46 c0       	rjmp	.+140    	; 0x678 <DIO_read+0xa2>
 5ec:	5c c0       	rjmp	.+184    	; 0x6a6 <DIO_read+0xd0>
	{
		case PORT_A:
		*value=(PINA&(1<<pinnumber))>>pinnumber;
 5ee:	79 b3       	in	r23, 0x19	; 25
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	9c 01       	movw	r18, r24
 5f6:	06 2e       	mov	r0, r22
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_read+0x28>
 5fa:	22 0f       	add	r18, r18
 5fc:	33 1f       	adc	r19, r19
 5fe:	0a 94       	dec	r0
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_read+0x24>
 602:	87 2f       	mov	r24, r23
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	82 23       	and	r24, r18
 608:	93 23       	and	r25, r19
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_read+0x3a>
 60c:	95 95       	asr	r25
 60e:	87 95       	ror	r24
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_read+0x36>
 614:	fa 01       	movw	r30, r20
 616:	80 83       	st	Z, r24
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 618:	81 e0       	ldi	r24, 0x01	; 1
{
	switch (portnumber)
	{
		case PORT_A:
		*value=(PINA&(1<<pinnumber))>>pinnumber;
		break;
 61a:	08 95       	ret
		case PORT_B:
		*value=(PINB&(1<<pinnumber))>>pinnumber;
 61c:	76 b3       	in	r23, 0x16	; 22
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	9c 01       	movw	r18, r24
 624:	06 2e       	mov	r0, r22
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_read+0x56>
 628:	22 0f       	add	r18, r18
 62a:	33 1f       	adc	r19, r19
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_read+0x52>
 630:	87 2f       	mov	r24, r23
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	82 23       	and	r24, r18
 636:	93 23       	and	r25, r19
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_read+0x68>
 63a:	95 95       	asr	r25
 63c:	87 95       	ror	r24
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_read+0x64>
 642:	fa 01       	movw	r30, r20
 644:	80 83       	st	Z, r24
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 646:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*value=(PINA&(1<<pinnumber))>>pinnumber;
		break;
		case PORT_B:
		*value=(PINB&(1<<pinnumber))>>pinnumber;
		break;
 648:	08 95       	ret
		case PORT_C:
		*value=(PINC&(1<<pinnumber))>>pinnumber;
 64a:	73 b3       	in	r23, 0x13	; 19
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	9c 01       	movw	r18, r24
 652:	06 2e       	mov	r0, r22
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_read+0x84>
 656:	22 0f       	add	r18, r18
 658:	33 1f       	adc	r19, r19
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_read+0x80>
 65e:	87 2f       	mov	r24, r23
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	82 23       	and	r24, r18
 664:	93 23       	and	r25, r19
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_read+0x96>
 668:	95 95       	asr	r25
 66a:	87 95       	ror	r24
 66c:	6a 95       	dec	r22
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_read+0x92>
 670:	fa 01       	movw	r30, r20
 672:	80 83       	st	Z, r24
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 674:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*value=(PINB&(1<<pinnumber))>>pinnumber;
		break;
		case PORT_C:
		*value=(PINC&(1<<pinnumber))>>pinnumber;
		break;
 676:	08 95       	ret
		case PORT_D:
		*value=(PIND&(1<<pinnumber))>>pinnumber;
 678:	70 b3       	in	r23, 0x10	; 16
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	9c 01       	movw	r18, r24
 680:	06 2e       	mov	r0, r22
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_read+0xb2>
 684:	22 0f       	add	r18, r18
 686:	33 1f       	adc	r19, r19
 688:	0a 94       	dec	r0
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_read+0xae>
 68c:	87 2f       	mov	r24, r23
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	82 23       	and	r24, r18
 692:	93 23       	and	r25, r19
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_read+0xc4>
 696:	95 95       	asr	r25
 698:	87 95       	ror	r24
 69a:	6a 95       	dec	r22
 69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_read+0xc0>
 69e:	fa 01       	movw	r30, r20
 6a0:	80 83       	st	Z, r24
		break;
		default:
		return DIO_ERROR;
		break;
	}
	return DIO_OK;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*value=(PINC&(1<<pinnumber))>>pinnumber;
		break;
		case PORT_D:
		*value=(PIND&(1<<pinnumber))>>pinnumber;
		break;
 6a4:	08 95       	ret
		default:
		return DIO_ERROR;
 6a6:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return DIO_OK;
 6a8:	08 95       	ret

000006aa <EXT_INT0_Init>:
#include "EXTI_private.h"
void (*callBackINT0)(void) = NULL;//assign the function to null at first
uint8_t EXT_INT0_Init(uint8_t INTSense)
{
	if(EXI_enable==Enable)
	SET(GICR,GICR_INT0);
 6aa:	9b b7       	in	r25, 0x3b	; 59
 6ac:	90 64       	ori	r25, 0x40	; 64
 6ae:	9b bf       	out	0x3b, r25	; 59
	switch (INTSense)//switch case to know which interrupt sense will be used
 6b0:	81 30       	cpi	r24, 0x01	; 1
 6b2:	71 f0       	breq	.+28     	; 0x6d0 <EXT_INT0_Init+0x26>
 6b4:	28 f0       	brcs	.+10     	; 0x6c0 <EXT_INT0_Init+0x16>
 6b6:	82 30       	cpi	r24, 0x02	; 2
 6b8:	89 f0       	breq	.+34     	; 0x6dc <EXT_INT0_Init+0x32>
 6ba:	83 30       	cpi	r24, 0x03	; 3
 6bc:	b9 f0       	breq	.+46     	; 0x6ec <EXT_INT0_Init+0x42>
 6be:	1e c0       	rjmp	.+60     	; 0x6fc <EXT_INT0_Init+0x52>
	{
		case FALLING_EDGE:
		CLEAR(MCUCR,ISC00);
 6c0:	85 b7       	in	r24, 0x35	; 53
 6c2:	8e 7f       	andi	r24, 0xFE	; 254
 6c4:	85 bf       	out	0x35, r24	; 53
		SET(MCUCR,ISC01);
 6c6:	85 b7       	in	r24, 0x35	; 53
 6c8:	82 60       	ori	r24, 0x02	; 2
 6ca:	85 bf       	out	0x35, r24	; 53
		CLEAR(MCUCR, ISC01);
		break;
		default:
		return INT_ERROR;
	}
	return INT_OK;
 6cc:	81 e0       	ldi	r24, 0x01	; 1
	switch (INTSense)//switch case to know which interrupt sense will be used
	{
		case FALLING_EDGE:
		CLEAR(MCUCR,ISC00);
		SET(MCUCR,ISC01);
		break;
 6ce:	08 95       	ret
		case RISING_EDGE:
		SET(MCUCR, ISC00);
 6d0:	85 b7       	in	r24, 0x35	; 53
 6d2:	81 60       	ori	r24, 0x01	; 1
 6d4:	85 bf       	out	0x35, r24	; 53
		SET(MCUCR, ISC01);
 6d6:	85 b7       	in	r24, 0x35	; 53
 6d8:	82 60       	ori	r24, 0x02	; 2
 6da:	85 bf       	out	0x35, r24	; 53
		case LOW_LEVEL:
		CLEAR (MCUCR, ISC00);
 6dc:	85 b7       	in	r24, 0x35	; 53
 6de:	8e 7f       	andi	r24, 0xFE	; 254
 6e0:	85 bf       	out	0x35, r24	; 53
		CLEAR (MCUCR, ISC01);
 6e2:	85 b7       	in	r24, 0x35	; 53
 6e4:	8d 7f       	andi	r24, 0xFD	; 253
 6e6:	85 bf       	out	0x35, r24	; 53
		CLEAR(MCUCR, ISC01);
		break;
		default:
		return INT_ERROR;
	}
	return INT_OK;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
		SET(MCUCR, ISC00);
		SET(MCUCR, ISC01);
		case LOW_LEVEL:
		CLEAR (MCUCR, ISC00);
		CLEAR (MCUCR, ISC01);
		break;
 6ea:	08 95       	ret
		case Change:
		SET(MCUCR, ISC00);
 6ec:	85 b7       	in	r24, 0x35	; 53
 6ee:	81 60       	ori	r24, 0x01	; 1
 6f0:	85 bf       	out	0x35, r24	; 53
		CLEAR(MCUCR, ISC01);
 6f2:	85 b7       	in	r24, 0x35	; 53
 6f4:	8d 7f       	andi	r24, 0xFD	; 253
 6f6:	85 bf       	out	0x35, r24	; 53
		break;
		default:
		return INT_ERROR;
	}
	return INT_OK;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
		CLEAR (MCUCR, ISC01);
		break;
		case Change:
		SET(MCUCR, ISC00);
		CLEAR(MCUCR, ISC01);
		break;
 6fa:	08 95       	ret
		default:
		return INT_ERROR;
 6fc:	80 e0       	ldi	r24, 0x00	; 0
	}
	return INT_OK;
}
 6fe:	08 95       	ret

00000700 <EXT_INT0_SETCallBack>:
void EXT_INT0_SETCallBack(void(*Fun)(void))
{
	callBackINT0 = Fun;
 700:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 704:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 708:	08 95       	ret

0000070a <__vector_1>:
}
void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void)
{
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	4f 93       	push	r20
 71a:	5f 93       	push	r21
 71c:	6f 93       	push	r22
 71e:	7f 93       	push	r23
 720:	8f 93       	push	r24
 722:	9f 93       	push	r25
 724:	af 93       	push	r26
 726:	bf 93       	push	r27
 728:	ef 93       	push	r30
 72a:	ff 93       	push	r31
	if (callBackINT0 != NULL)
 72c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 730:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 734:	30 97       	sbiw	r30, 0x00	; 0
 736:	09 f0       	breq	.+2      	; 0x73a <__vector_1+0x30>
	{
		callBackINT0();//if it is not equal null so the interrupt happens
 738:	09 95       	icall
	}
 73a:	ff 91       	pop	r31
 73c:	ef 91       	pop	r30
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	7f 91       	pop	r23
 748:	6f 91       	pop	r22
 74a:	5f 91       	pop	r21
 74c:	4f 91       	pop	r20
 74e:	3f 91       	pop	r19
 750:	2f 91       	pop	r18
 752:	0f 90       	pop	r0
 754:	0f be       	out	0x3f, r0	; 63
 756:	0f 90       	pop	r0
 758:	1f 90       	pop	r1
 75a:	18 95       	reti

0000075c <GIE_Enable>:
#include "../../Bit_calculations.h"
#include "GIE_Interface.h"
#include "GIE_Private.h"
void GIE_Enable(void)
{
	SET(SREG,7);
 75c:	8f b7       	in	r24, 0x3f	; 63
 75e:	80 68       	ori	r24, 0x80	; 128
 760:	8f bf       	out	0x3f, r24	; 63
 762:	08 95       	ret

00000764 <Timer_delay>:
#include "../../Bit_calculations.h"
#include "Timer0.h"
#define F_CPU 1000000U

	uint8_t Timer_delay(uint8_t sec)
	{
 764:	8f 92       	push	r8
 766:	9f 92       	push	r9
 768:	af 92       	push	r10
 76a:	bf 92       	push	r11
 76c:	cf 92       	push	r12
 76e:	df 92       	push	r13
 770:	ef 92       	push	r14
 772:	ff 92       	push	r15
		if(sec>0)
 774:	88 23       	and	r24, r24
 776:	91 f1       	breq	.+100    	; 0x7dc <Timer_delay+0x78>
		{
		float OVF = ((sec)/( (1.0/F_CPU)*256));//OVF=delay req/max delay & max delay=2^8*tick& tick=prescaler/f_cpu
 778:	68 2f       	mov	r22, r24
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 de 04 	call	0x9bc	; 0x9bc <__floatsisf>
 784:	2d eb       	ldi	r18, 0xBD	; 189
 786:	37 e3       	ldi	r19, 0x37	; 55
 788:	46 e8       	ldi	r20, 0x86	; 134
 78a:	59 e3       	ldi	r21, 0x39	; 57
 78c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__divsf3>
 790:	4b 01       	movw	r8, r22
 792:	5c 01       	movw	r10, r24
		float OVF_count = 0;
		TCCR0 = 0x00;// normal mode
 794:	13 be       	out	0x33, r1	; 51
		TCNT0 = 0x00;// initial value=0
 796:	12 be       	out	0x32, r1	; 50
		TCCR0 |= (1<<0); // no prescaler
 798:	83 b7       	in	r24, 0x33	; 51
 79a:	81 60       	ori	r24, 0x01	; 1
 79c:	83 bf       	out	0x33, r24	; 51
	uint8_t Timer_delay(uint8_t sec)
	{
		if(sec>0)
		{
		float OVF = ((sec)/( (1.0/F_CPU)*256));//OVF=delay req/max delay & max delay=2^8*tick& tick=prescaler/f_cpu
		float OVF_count = 0;
 79e:	c1 2c       	mov	r12, r1
 7a0:	d1 2c       	mov	r13, r1
 7a2:	76 01       	movw	r14, r12
		TCCR0 = 0x00;// normal mode
		TCNT0 = 0x00;// initial value=0
		TCCR0 |= (1<<0); // no prescaler
		while (OVF_count < OVF)
 7a4:	10 c0       	rjmp	.+32     	; 0x7c6 <Timer_delay+0x62>
		{
			while((TIFR0 & (1<<0)) == 0);//busy wait till TIFR=1
 7a6:	08 b6       	in	r0, 0x38	; 56
 7a8:	00 fe       	sbrs	r0, 0
 7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <Timer_delay+0x42>
			TIFR0 |= (1<<0);//reset overflow
 7ac:	88 b7       	in	r24, 0x38	; 56
 7ae:	81 60       	ori	r24, 0x01	; 1
 7b0:	88 bf       	out	0x38, r24	; 56
			OVF_count++;
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	40 e8       	ldi	r20, 0x80	; 128
 7b8:	5f e3       	ldi	r21, 0x3F	; 63
 7ba:	c7 01       	movw	r24, r14
 7bc:	b6 01       	movw	r22, r12
 7be:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__addsf3>
 7c2:	6b 01       	movw	r12, r22
 7c4:	7c 01       	movw	r14, r24
		float OVF = ((sec)/( (1.0/F_CPU)*256));//OVF=delay req/max delay & max delay=2^8*tick& tick=prescaler/f_cpu
		float OVF_count = 0;
		TCCR0 = 0x00;// normal mode
		TCNT0 = 0x00;// initial value=0
		TCCR0 |= (1<<0); // no prescaler
		while (OVF_count < OVF)
 7c6:	a5 01       	movw	r20, r10
 7c8:	94 01       	movw	r18, r8
 7ca:	c7 01       	movw	r24, r14
 7cc:	b6 01       	movw	r22, r12
 7ce:	0e 94 65 04 	call	0x8ca	; 0x8ca <__cmpsf2>
 7d2:	88 23       	and	r24, r24
 7d4:	44 f3       	brlt	.-48     	; 0x7a6 <Timer_delay+0x42>
		{
			while((TIFR0 & (1<<0)) == 0);//busy wait till TIFR=1
			TIFR0 |= (1<<0);//reset overflow
			OVF_count++;
		}
		TCCR0 = 0x00;//reset timer
 7d6:	13 be       	out	0x33, r1	; 51
		return TIMER_OK;
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	01 c0       	rjmp	.+2      	; 0x7de <Timer_delay+0x7a>
		}
		return TIMER_ERROR;
 7dc:	80 e0       	ldi	r24, 0x00	; 0
	}
 7de:	ff 90       	pop	r15
 7e0:	ef 90       	pop	r14
 7e2:	df 90       	pop	r13
 7e4:	cf 90       	pop	r12
 7e6:	bf 90       	pop	r11
 7e8:	af 90       	pop	r10
 7ea:	9f 90       	pop	r9
 7ec:	8f 90       	pop	r8
 7ee:	08 95       	ret

000007f0 <__subsf3>:
 7f0:	50 58       	subi	r21, 0x80	; 128

000007f2 <__addsf3>:
 7f2:	bb 27       	eor	r27, r27
 7f4:	aa 27       	eor	r26, r26
 7f6:	0e 94 10 04 	call	0x820	; 0x820 <__addsf3x>
 7fa:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__fp_round>
 7fe:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_pscA>
 802:	38 f0       	brcs	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 804:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_pscB>
 808:	20 f0       	brcs	.+8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80a:	39 f4       	brne	.+14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80c:	9f 3f       	cpi	r25, 0xFF	; 255
 80e:	19 f4       	brne	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	26 f4       	brtc	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 812:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_nan>
 816:	0e f4       	brtc	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 818:	e0 95       	com	r30
 81a:	e7 fb       	bst	r30, 7
 81c:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_inf>

00000820 <__addsf3x>:
 820:	e9 2f       	mov	r30, r25
 822:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_split3>
 826:	58 f3       	brcs	.-42     	; 0x7fe <__addsf3+0xc>
 828:	ba 17       	cp	r27, r26
 82a:	62 07       	cpc	r22, r18
 82c:	73 07       	cpc	r23, r19
 82e:	84 07       	cpc	r24, r20
 830:	95 07       	cpc	r25, r21
 832:	20 f0       	brcs	.+8      	; 0x83c <__addsf3x+0x1c>
 834:	79 f4       	brne	.+30     	; 0x854 <__addsf3x+0x34>
 836:	a6 f5       	brtc	.+104    	; 0x8a0 <__stack+0x41>
 838:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_zero>
 83c:	0e f4       	brtc	.+2      	; 0x840 <__addsf3x+0x20>
 83e:	e0 95       	com	r30
 840:	0b 2e       	mov	r0, r27
 842:	ba 2f       	mov	r27, r26
 844:	a0 2d       	mov	r26, r0
 846:	0b 01       	movw	r0, r22
 848:	b9 01       	movw	r22, r18
 84a:	90 01       	movw	r18, r0
 84c:	0c 01       	movw	r0, r24
 84e:	ca 01       	movw	r24, r20
 850:	a0 01       	movw	r20, r0
 852:	11 24       	eor	r1, r1
 854:	ff 27       	eor	r31, r31
 856:	59 1b       	sub	r21, r25
 858:	99 f0       	breq	.+38     	; 0x880 <__stack+0x21>
 85a:	59 3f       	cpi	r21, 0xF9	; 249
 85c:	50 f4       	brcc	.+20     	; 0x872 <__stack+0x13>
 85e:	50 3e       	cpi	r21, 0xE0	; 224
 860:	68 f1       	brcs	.+90     	; 0x8bc <__stack+0x5d>
 862:	1a 16       	cp	r1, r26
 864:	f0 40       	sbci	r31, 0x00	; 0
 866:	a2 2f       	mov	r26, r18
 868:	23 2f       	mov	r18, r19
 86a:	34 2f       	mov	r19, r20
 86c:	44 27       	eor	r20, r20
 86e:	58 5f       	subi	r21, 0xF8	; 248
 870:	f3 cf       	rjmp	.-26     	; 0x858 <__addsf3x+0x38>
 872:	46 95       	lsr	r20
 874:	37 95       	ror	r19
 876:	27 95       	ror	r18
 878:	a7 95       	ror	r26
 87a:	f0 40       	sbci	r31, 0x00	; 0
 87c:	53 95       	inc	r21
 87e:	c9 f7       	brne	.-14     	; 0x872 <__stack+0x13>
 880:	7e f4       	brtc	.+30     	; 0x8a0 <__stack+0x41>
 882:	1f 16       	cp	r1, r31
 884:	ba 0b       	sbc	r27, r26
 886:	62 0b       	sbc	r22, r18
 888:	73 0b       	sbc	r23, r19
 88a:	84 0b       	sbc	r24, r20
 88c:	ba f0       	brmi	.+46     	; 0x8bc <__stack+0x5d>
 88e:	91 50       	subi	r25, 0x01	; 1
 890:	a1 f0       	breq	.+40     	; 0x8ba <__stack+0x5b>
 892:	ff 0f       	add	r31, r31
 894:	bb 1f       	adc	r27, r27
 896:	66 1f       	adc	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	c2 f7       	brpl	.-16     	; 0x88e <__stack+0x2f>
 89e:	0e c0       	rjmp	.+28     	; 0x8bc <__stack+0x5d>
 8a0:	ba 0f       	add	r27, r26
 8a2:	62 1f       	adc	r22, r18
 8a4:	73 1f       	adc	r23, r19
 8a6:	84 1f       	adc	r24, r20
 8a8:	48 f4       	brcc	.+18     	; 0x8bc <__stack+0x5d>
 8aa:	87 95       	ror	r24
 8ac:	77 95       	ror	r23
 8ae:	67 95       	ror	r22
 8b0:	b7 95       	ror	r27
 8b2:	f7 95       	ror	r31
 8b4:	9e 3f       	cpi	r25, 0xFE	; 254
 8b6:	08 f0       	brcs	.+2      	; 0x8ba <__stack+0x5b>
 8b8:	b0 cf       	rjmp	.-160    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 8ba:	93 95       	inc	r25
 8bc:	88 0f       	add	r24, r24
 8be:	08 f0       	brcs	.+2      	; 0x8c2 <__stack+0x63>
 8c0:	99 27       	eor	r25, r25
 8c2:	ee 0f       	add	r30, r30
 8c4:	97 95       	ror	r25
 8c6:	87 95       	ror	r24
 8c8:	08 95       	ret

000008ca <__cmpsf2>:
 8ca:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_cmp>
 8ce:	08 f4       	brcc	.+2      	; 0x8d2 <__cmpsf2+0x8>
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	08 95       	ret

000008d4 <__divsf3>:
 8d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divsf3x>
 8d8:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__fp_round>
 8dc:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_pscB>
 8e0:	58 f0       	brcs	.+22     	; 0x8f8 <__divsf3+0x24>
 8e2:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_pscA>
 8e6:	40 f0       	brcs	.+16     	; 0x8f8 <__divsf3+0x24>
 8e8:	29 f4       	brne	.+10     	; 0x8f4 <__divsf3+0x20>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	29 f0       	breq	.+10     	; 0x8f8 <__divsf3+0x24>
 8ee:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_inf>
 8f2:	51 11       	cpse	r21, r1
 8f4:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 8f8:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_nan>

000008fc <__divsf3x>:
 8fc:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_split3>
 900:	68 f3       	brcs	.-38     	; 0x8dc <__divsf3+0x8>

00000902 <__divsf3_pse>:
 902:	99 23       	and	r25, r25
 904:	b1 f3       	breq	.-20     	; 0x8f2 <__divsf3+0x1e>
 906:	55 23       	and	r21, r21
 908:	91 f3       	breq	.-28     	; 0x8ee <__divsf3+0x1a>
 90a:	95 1b       	sub	r25, r21
 90c:	55 0b       	sbc	r21, r21
 90e:	bb 27       	eor	r27, r27
 910:	aa 27       	eor	r26, r26
 912:	62 17       	cp	r22, r18
 914:	73 07       	cpc	r23, r19
 916:	84 07       	cpc	r24, r20
 918:	38 f0       	brcs	.+14     	; 0x928 <__divsf3_pse+0x26>
 91a:	9f 5f       	subi	r25, 0xFF	; 255
 91c:	5f 4f       	sbci	r21, 0xFF	; 255
 91e:	22 0f       	add	r18, r18
 920:	33 1f       	adc	r19, r19
 922:	44 1f       	adc	r20, r20
 924:	aa 1f       	adc	r26, r26
 926:	a9 f3       	breq	.-22     	; 0x912 <__divsf3_pse+0x10>
 928:	35 d0       	rcall	.+106    	; 0x994 <__divsf3_pse+0x92>
 92a:	0e 2e       	mov	r0, r30
 92c:	3a f0       	brmi	.+14     	; 0x93c <__divsf3_pse+0x3a>
 92e:	e0 e8       	ldi	r30, 0x80	; 128
 930:	32 d0       	rcall	.+100    	; 0x996 <__divsf3_pse+0x94>
 932:	91 50       	subi	r25, 0x01	; 1
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	e6 95       	lsr	r30
 938:	00 1c       	adc	r0, r0
 93a:	ca f7       	brpl	.-14     	; 0x92e <__divsf3_pse+0x2c>
 93c:	2b d0       	rcall	.+86     	; 0x994 <__divsf3_pse+0x92>
 93e:	fe 2f       	mov	r31, r30
 940:	29 d0       	rcall	.+82     	; 0x994 <__divsf3_pse+0x92>
 942:	66 0f       	add	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	bb 1f       	adc	r27, r27
 94a:	26 17       	cp	r18, r22
 94c:	37 07       	cpc	r19, r23
 94e:	48 07       	cpc	r20, r24
 950:	ab 07       	cpc	r26, r27
 952:	b0 e8       	ldi	r27, 0x80	; 128
 954:	09 f0       	breq	.+2      	; 0x958 <__divsf3_pse+0x56>
 956:	bb 0b       	sbc	r27, r27
 958:	80 2d       	mov	r24, r0
 95a:	bf 01       	movw	r22, r30
 95c:	ff 27       	eor	r31, r31
 95e:	93 58       	subi	r25, 0x83	; 131
 960:	5f 4f       	sbci	r21, 0xFF	; 255
 962:	3a f0       	brmi	.+14     	; 0x972 <__divsf3_pse+0x70>
 964:	9e 3f       	cpi	r25, 0xFE	; 254
 966:	51 05       	cpc	r21, r1
 968:	78 f0       	brcs	.+30     	; 0x988 <__divsf3_pse+0x86>
 96a:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__fp_inf>
 96e:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_szero>
 972:	5f 3f       	cpi	r21, 0xFF	; 255
 974:	e4 f3       	brlt	.-8      	; 0x96e <__divsf3_pse+0x6c>
 976:	98 3e       	cpi	r25, 0xE8	; 232
 978:	d4 f3       	brlt	.-12     	; 0x96e <__divsf3_pse+0x6c>
 97a:	86 95       	lsr	r24
 97c:	77 95       	ror	r23
 97e:	67 95       	ror	r22
 980:	b7 95       	ror	r27
 982:	f7 95       	ror	r31
 984:	9f 5f       	subi	r25, 0xFF	; 255
 986:	c9 f7       	brne	.-14     	; 0x97a <__divsf3_pse+0x78>
 988:	88 0f       	add	r24, r24
 98a:	91 1d       	adc	r25, r1
 98c:	96 95       	lsr	r25
 98e:	87 95       	ror	r24
 990:	97 f9       	bld	r25, 7
 992:	08 95       	ret
 994:	e1 e0       	ldi	r30, 0x01	; 1
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	bb 1f       	adc	r27, r27
 99e:	62 17       	cp	r22, r18
 9a0:	73 07       	cpc	r23, r19
 9a2:	84 07       	cpc	r24, r20
 9a4:	ba 07       	cpc	r27, r26
 9a6:	20 f0       	brcs	.+8      	; 0x9b0 <__divsf3_pse+0xae>
 9a8:	62 1b       	sub	r22, r18
 9aa:	73 0b       	sbc	r23, r19
 9ac:	84 0b       	sbc	r24, r20
 9ae:	ba 0b       	sbc	r27, r26
 9b0:	ee 1f       	adc	r30, r30
 9b2:	88 f7       	brcc	.-30     	; 0x996 <__divsf3_pse+0x94>
 9b4:	e0 95       	com	r30
 9b6:	08 95       	ret

000009b8 <__floatunsisf>:
 9b8:	e8 94       	clt
 9ba:	09 c0       	rjmp	.+18     	; 0x9ce <__floatsisf+0x12>

000009bc <__floatsisf>:
 9bc:	97 fb       	bst	r25, 7
 9be:	3e f4       	brtc	.+14     	; 0x9ce <__floatsisf+0x12>
 9c0:	90 95       	com	r25
 9c2:	80 95       	com	r24
 9c4:	70 95       	com	r23
 9c6:	61 95       	neg	r22
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ca:	8f 4f       	sbci	r24, 0xFF	; 255
 9cc:	9f 4f       	sbci	r25, 0xFF	; 255
 9ce:	99 23       	and	r25, r25
 9d0:	a9 f0       	breq	.+42     	; 0x9fc <__floatsisf+0x40>
 9d2:	f9 2f       	mov	r31, r25
 9d4:	96 e9       	ldi	r25, 0x96	; 150
 9d6:	bb 27       	eor	r27, r27
 9d8:	93 95       	inc	r25
 9da:	f6 95       	lsr	r31
 9dc:	87 95       	ror	r24
 9de:	77 95       	ror	r23
 9e0:	67 95       	ror	r22
 9e2:	b7 95       	ror	r27
 9e4:	f1 11       	cpse	r31, r1
 9e6:	f8 cf       	rjmp	.-16     	; 0x9d8 <__floatsisf+0x1c>
 9e8:	fa f4       	brpl	.+62     	; 0xa28 <__floatsisf+0x6c>
 9ea:	bb 0f       	add	r27, r27
 9ec:	11 f4       	brne	.+4      	; 0x9f2 <__floatsisf+0x36>
 9ee:	60 ff       	sbrs	r22, 0
 9f0:	1b c0       	rjmp	.+54     	; 0xa28 <__floatsisf+0x6c>
 9f2:	6f 5f       	subi	r22, 0xFF	; 255
 9f4:	7f 4f       	sbci	r23, 0xFF	; 255
 9f6:	8f 4f       	sbci	r24, 0xFF	; 255
 9f8:	9f 4f       	sbci	r25, 0xFF	; 255
 9fa:	16 c0       	rjmp	.+44     	; 0xa28 <__floatsisf+0x6c>
 9fc:	88 23       	and	r24, r24
 9fe:	11 f0       	breq	.+4      	; 0xa04 <__floatsisf+0x48>
 a00:	96 e9       	ldi	r25, 0x96	; 150
 a02:	11 c0       	rjmp	.+34     	; 0xa26 <__floatsisf+0x6a>
 a04:	77 23       	and	r23, r23
 a06:	21 f0       	breq	.+8      	; 0xa10 <__floatsisf+0x54>
 a08:	9e e8       	ldi	r25, 0x8E	; 142
 a0a:	87 2f       	mov	r24, r23
 a0c:	76 2f       	mov	r23, r22
 a0e:	05 c0       	rjmp	.+10     	; 0xa1a <__floatsisf+0x5e>
 a10:	66 23       	and	r22, r22
 a12:	71 f0       	breq	.+28     	; 0xa30 <__floatsisf+0x74>
 a14:	96 e8       	ldi	r25, 0x86	; 134
 a16:	86 2f       	mov	r24, r22
 a18:	70 e0       	ldi	r23, 0x00	; 0
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	2a f0       	brmi	.+10     	; 0xa28 <__floatsisf+0x6c>
 a1e:	9a 95       	dec	r25
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	da f7       	brpl	.-10     	; 0xa1e <__floatsisf+0x62>
 a28:	88 0f       	add	r24, r24
 a2a:	96 95       	lsr	r25
 a2c:	87 95       	ror	r24
 a2e:	97 f9       	bld	r25, 7
 a30:	08 95       	ret

00000a32 <__fp_cmp>:
 a32:	99 0f       	add	r25, r25
 a34:	00 08       	sbc	r0, r0
 a36:	55 0f       	add	r21, r21
 a38:	aa 0b       	sbc	r26, r26
 a3a:	e0 e8       	ldi	r30, 0x80	; 128
 a3c:	fe ef       	ldi	r31, 0xFE	; 254
 a3e:	16 16       	cp	r1, r22
 a40:	17 06       	cpc	r1, r23
 a42:	e8 07       	cpc	r30, r24
 a44:	f9 07       	cpc	r31, r25
 a46:	c0 f0       	brcs	.+48     	; 0xa78 <__fp_cmp+0x46>
 a48:	12 16       	cp	r1, r18
 a4a:	13 06       	cpc	r1, r19
 a4c:	e4 07       	cpc	r30, r20
 a4e:	f5 07       	cpc	r31, r21
 a50:	98 f0       	brcs	.+38     	; 0xa78 <__fp_cmp+0x46>
 a52:	62 1b       	sub	r22, r18
 a54:	73 0b       	sbc	r23, r19
 a56:	84 0b       	sbc	r24, r20
 a58:	95 0b       	sbc	r25, r21
 a5a:	39 f4       	brne	.+14     	; 0xa6a <__fp_cmp+0x38>
 a5c:	0a 26       	eor	r0, r26
 a5e:	61 f0       	breq	.+24     	; 0xa78 <__fp_cmp+0x46>
 a60:	23 2b       	or	r18, r19
 a62:	24 2b       	or	r18, r20
 a64:	25 2b       	or	r18, r21
 a66:	21 f4       	brne	.+8      	; 0xa70 <__fp_cmp+0x3e>
 a68:	08 95       	ret
 a6a:	0a 26       	eor	r0, r26
 a6c:	09 f4       	brne	.+2      	; 0xa70 <__fp_cmp+0x3e>
 a6e:	a1 40       	sbci	r26, 0x01	; 1
 a70:	a6 95       	lsr	r26
 a72:	8f ef       	ldi	r24, 0xFF	; 255
 a74:	81 1d       	adc	r24, r1
 a76:	81 1d       	adc	r24, r1
 a78:	08 95       	ret

00000a7a <__fp_inf>:
 a7a:	97 f9       	bld	r25, 7
 a7c:	9f 67       	ori	r25, 0x7F	; 127
 a7e:	80 e8       	ldi	r24, 0x80	; 128
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	60 e0       	ldi	r22, 0x00	; 0
 a84:	08 95       	ret

00000a86 <__fp_nan>:
 a86:	9f ef       	ldi	r25, 0xFF	; 255
 a88:	80 ec       	ldi	r24, 0xC0	; 192
 a8a:	08 95       	ret

00000a8c <__fp_pscA>:
 a8c:	00 24       	eor	r0, r0
 a8e:	0a 94       	dec	r0
 a90:	16 16       	cp	r1, r22
 a92:	17 06       	cpc	r1, r23
 a94:	18 06       	cpc	r1, r24
 a96:	09 06       	cpc	r0, r25
 a98:	08 95       	ret

00000a9a <__fp_pscB>:
 a9a:	00 24       	eor	r0, r0
 a9c:	0a 94       	dec	r0
 a9e:	12 16       	cp	r1, r18
 aa0:	13 06       	cpc	r1, r19
 aa2:	14 06       	cpc	r1, r20
 aa4:	05 06       	cpc	r0, r21
 aa6:	08 95       	ret

00000aa8 <__fp_round>:
 aa8:	09 2e       	mov	r0, r25
 aaa:	03 94       	inc	r0
 aac:	00 0c       	add	r0, r0
 aae:	11 f4       	brne	.+4      	; 0xab4 <__fp_round+0xc>
 ab0:	88 23       	and	r24, r24
 ab2:	52 f0       	brmi	.+20     	; 0xac8 <__fp_round+0x20>
 ab4:	bb 0f       	add	r27, r27
 ab6:	40 f4       	brcc	.+16     	; 0xac8 <__fp_round+0x20>
 ab8:	bf 2b       	or	r27, r31
 aba:	11 f4       	brne	.+4      	; 0xac0 <__fp_round+0x18>
 abc:	60 ff       	sbrs	r22, 0
 abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fp_round+0x20>
 ac0:	6f 5f       	subi	r22, 0xFF	; 255
 ac2:	7f 4f       	sbci	r23, 0xFF	; 255
 ac4:	8f 4f       	sbci	r24, 0xFF	; 255
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	08 95       	ret

00000aca <__fp_split3>:
 aca:	57 fd       	sbrc	r21, 7
 acc:	90 58       	subi	r25, 0x80	; 128
 ace:	44 0f       	add	r20, r20
 ad0:	55 1f       	adc	r21, r21
 ad2:	59 f0       	breq	.+22     	; 0xaea <__fp_splitA+0x10>
 ad4:	5f 3f       	cpi	r21, 0xFF	; 255
 ad6:	71 f0       	breq	.+28     	; 0xaf4 <__fp_splitA+0x1a>
 ad8:	47 95       	ror	r20

00000ada <__fp_splitA>:
 ada:	88 0f       	add	r24, r24
 adc:	97 fb       	bst	r25, 7
 ade:	99 1f       	adc	r25, r25
 ae0:	61 f0       	breq	.+24     	; 0xafa <__fp_splitA+0x20>
 ae2:	9f 3f       	cpi	r25, 0xFF	; 255
 ae4:	79 f0       	breq	.+30     	; 0xb04 <__fp_splitA+0x2a>
 ae6:	87 95       	ror	r24
 ae8:	08 95       	ret
 aea:	12 16       	cp	r1, r18
 aec:	13 06       	cpc	r1, r19
 aee:	14 06       	cpc	r1, r20
 af0:	55 1f       	adc	r21, r21
 af2:	f2 cf       	rjmp	.-28     	; 0xad8 <__fp_split3+0xe>
 af4:	46 95       	lsr	r20
 af6:	f1 df       	rcall	.-30     	; 0xada <__fp_splitA>
 af8:	08 c0       	rjmp	.+16     	; 0xb0a <__fp_splitA+0x30>
 afa:	16 16       	cp	r1, r22
 afc:	17 06       	cpc	r1, r23
 afe:	18 06       	cpc	r1, r24
 b00:	99 1f       	adc	r25, r25
 b02:	f1 cf       	rjmp	.-30     	; 0xae6 <__fp_splitA+0xc>
 b04:	86 95       	lsr	r24
 b06:	71 05       	cpc	r23, r1
 b08:	61 05       	cpc	r22, r1
 b0a:	08 94       	sec
 b0c:	08 95       	ret

00000b0e <__fp_zero>:
 b0e:	e8 94       	clt

00000b10 <__fp_szero>:
 b10:	bb 27       	eor	r27, r27
 b12:	66 27       	eor	r22, r22
 b14:	77 27       	eor	r23, r23
 b16:	cb 01       	movw	r24, r22
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret

00000b1c <_exit>:
 b1c:	f8 94       	cli

00000b1e <__stop_program>:
 b1e:	ff cf       	rjmp	.-2      	; 0xb1e <__stop_program>
